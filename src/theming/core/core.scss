$black-87-opacity: rgba(black, 0.87);
$white-87-opacity: rgba(white, 0.87);
$black-12-opacity: rgba(black, 0.12);
$white-12-opacity: rgba(white, 0.12);
$black-6-opacity: rgba(black, 0.06);
$white-6-opacity: rgba(white, 0.06);
$component-state: (
  default,
  primary,
  secondary,
  success,
  info,
  warning,
  danger,
  link
);
// Background palette for light themes.
$ave-light-theme-background: (
  status-bar: #e0e0e0,
  app-bar:    #ffffff,
  background: #ffffff,
  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX
  card:       white,
  dialog:     white,
  disabled-button: $black-12-opacity,
  raised-button: white,
  hovered-button: rgba(#bdbdbd, 0.6),
  focused-button: rgba(#bdbdbd, 0.6),
  selected-button: rgba(#bdbdbd, 0.6),
  selected-disabled-button: #bdbdbd,
  disabled-button-toggle: #eeeeee,
);

// Background palette for dark themes.
$ave-dark-theme-background: (
  status-bar: black,
  app-bar:    #212121,
  background: #303030,
  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX
  card:       #424242,
  dialog:     #424242,
  disabled-button: $white-12-opacity,
  raised-button: #424242,
  focused-button: $white-6-opacity,
  selected-button: #212121,
  selected-disabled-button: #424242,
  disabled-button-toggle: #000000,
);

// Foreground palette for light themes.
$ave-light-theme-foreground: (
  base:            black,
  divider:         $black-12-opacity,
  dividers:        $black-12-opacity,
  disabled:        rgba(black, 0.38),
  disabled-button: rgba(black, 0.38),
  disabled-text:   rgba(black, 0.38),
  hint-text:       rgba(black, 0.38),
  secondary-text:  rgba(black, 0.54),
  icon:            rgba(black, 0.54),
  icons:           rgba(black, 0.54),
  text:            rgba(black, 0.87)
);

// Foreground palette for dark themes.
$ave-dark-theme-foreground: (
  base:            white,
  divider:         $white-12-opacity,
  dividers:        $white-12-opacity,
  disabled:        rgba(white, 0.3),
  disabled-button: rgba(white, 0.3),
  disabled-text:   rgba(white, 0.3),
  hint-text:       rgba(white, 0.3),
  secondary-text:  rgba(white, 0.7),
  icon:            white,
  icons:           white,
  text:            white
);


// For a given hue in a palette, return the contrast color from the map of contrast palettes.
// @param $color-map
// @param $hue
@function ave-contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}

// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms
// of the Material Design hues.
// @param $color-map
// @param $primary
// @param $lighter
@function ave-palette($base-palette, $default: 500, $lighter: 100, $darker: 700) {
  $result: map_merge($base-palette, (
    default: map-get($base-palette, $default),
    lighter: map-get($base-palette, $lighter),
    darker: map-get($base-palette, $darker),

    default-contrast: ave-contrast($base-palette, $default),
    lighter-contrast: ave-contrast($base-palette, $lighter),
    darker-contrast: ave-contrast($base-palette, $darker)
  ));

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map_merge($result, (
      '#{$hue}-contrast': ave-contrast($base-palette, $hue)
    ));
  }

  @return $result;
}

@function ave-typography($base-typography, $thinner, $thicker) {

}

@function ave-sizing($base-sizing, $tighter, $looser) {

}
// Creates a container object for a light theme to be given to individual component theme mixins.
@function ave-theme($theme-color, $theme-typography, $theme-sizing) {
  @return (
    color: $theme-color,
    typography: $theme-typography,
    sizing: $theme-sizing
  );
}

// Gets a color from a theme palette (the output of ave-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color-map The theme palette (output of ave-palette).
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function ave-color($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return ave-color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);
  $opacity: if($opacity == null, opacity($color), $opacity);

  @return rgba($color, $opacity);
}
