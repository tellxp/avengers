$black-87-opacity: rgba(black, 0.87);
$white-87-opacity: rgba(white, 0.87);
$black-12-opacity: rgba(black, 0.12);
$white-12-opacity: rgba(white, 0.12);
$black-6-opacity: rgba(black, 0.06);
$white-6-opacity: rgba(white, 0.06);



// For a given hue in a palette, return the contrast color from the map of contrast palettes.
// @param $color-map
// @param $hue
@function ave-contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}

// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms
// of the Material Design hues.
// @param $color-map
// @param $primary
// @param $lighter
@function ave-palette($base-palette, $default: 500, $lighter: 100, $darker: 700) {
  $result: map_merge($base-palette, (
    default: map-get($base-palette, $default),
    lighter: map-get($base-palette, $lighter),
    darker: map-get($base-palette, $darker),
    default-contrast: ave-contrast($base-palette, $default),
    lighter-contrast: ave-contrast($base-palette, $lighter),
    darker-contrast: ave-contrast($base-palette, $darker)
  ));

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map_merge($result, (
      '#{$hue}-contrast': ave-contrast($base-palette, $hue)
    ));
  }

  @return $result;
}

@function ave-component-theme($theme-palette, $theme-typography, $theme-sizing) {
  @return (
    palette: $theme-palette,
    typography: $theme-typography,
    sizing: $theme-sizing
  );
}



@function ave-scene-property-color($theme, $scene, $property) {
  $color: map_get($theme, color);
  $color-scene: map_get($color, $scene);
  @return map_get($color-scene, $property);
}

@function ave-scene-state-sizing($theme, $scene, $property) {
  $sizing: map_get($theme, sizing);
  $sizing-scene: map_get($sizing, $scene);
  @return map_get($sizing-scene, $property);
}

@function ave-theme-ingredient($theme, $ingredient) {
  $result: map_get($theme, $ingredient);
  @return $result;
}

@function ave-ingredient-scene($ingredient, $scene) {
  $result: map_get($ingredient, $scene);
  @return $result;
}

@function ave-scene-state($scene, $state) {
  $result: map_get($scene, $state);
  @return $result;
}

@function ave-state-property($state, $property) {
  $result: map_get($state, $property);
  @return $result;
}

@function ave-scene-property-typography($theme, $scene, $property) {
  $typography: map_get($theme, typography);
  $typography-scene: map_get($typography, $scene);
  @return map_get($typography-scene, $property);
}
