$ave-prefix: 'v';
// Typography
$ave-body-font-size-base: 1em;
$ave-font-family: "Microsoft YaHei", Roboto, 'Helvetica Neue', sans-serif !default;

// Color
$base-color: #ffffff;
$component-back-color: transparentize($base-color, 1);

$theme-component-scene: (
  default,
  primary,
  secondary,
  success,
  info,
  warning,
  danger,
  link
);

$theme-component-state: (
  none,
  active,
  hover,
  focus,
  visited
);

// Get property map for component by using 1 state theme
@function ave-component-state-property($theme-state, $component-property) {
  $component-theme-state: ();
  @each $property in $component-property {
    $result: (
      $property: map_get($theme-state, $property)
    );
    $component-theme-state: map_merge($component-theme-state, $result);
  }
  @return $component-theme-state;
}

// Get state map for component by using 1 scene theme
@function ave-component-scene-state($theme-scene, $component-state, $component-property) {
  $component-theme-scene: ();
  @each $state in $component-state {
    $theme-property: map_get($theme-scene, $state);
    $result: (
      $state: ave-component-state-property($theme-property, $component-property)
    );
    $component-theme-scene: map_merge($component-theme-scene, $result);
  }
  @return $component-theme-scene;
}

@function ave-component-theme-composer($ingredient-base, $component-state, $component-property) {
  $component-theme-ingredient: ();
  @each $scene, $theme-scene in $ingredient-base {
    $result: (
      $scene: ave-component-scene-state($theme-scene, $component-state, $component-property)
    );
    $component-theme-ingredient: map_merge($component-theme-ingredient, $result);
  }
  @return $component-theme-ingredient;
}

@function ave-property($component-theme, $scene-name, $state-name, $property-name) {
  $theme-scene: map_get($component-theme, $scene-name);
  $theme-state: map_get($theme-scene, $state-name);
  $theme-property: map_get($theme-state, $property-name);
  @return $theme-property;
}
// Palette
//@mixin ave-component-property-style($state-style) {
//  @each $property, $value in $state-style {
//    #{$property}: $value;
//  }
//}
//
//@mixin ave-component-state-style($scene-style) {
//  @each $state, $state-style in $scene-style {
//    @if ($state == none) {
//      & {
//        @include ave-component-property-style($state-style);
//      }
//    } @else {
//      &:#{$state} {
//        @include ave-component-property-style($state-style);
//      }
//    }
//  }
//}
//
//@mixin ave-component-scene-style($ingredient-style) {
//  @each $scene, $scene-style in $ingredient-style {
//    &-#{$scene} {
//      @include ave-component-state-style($scene-style);
//    }
//  }
//}
//
//@mixin ave-component-style($component-name, $component-theme) {
//  @each $ingredient-style in $component-theme {
//    .#{$ave-prefix}-#{$component-name} {
//      @include ave-component-scene-style($ingredient-style);
//    }
//  }
//}
